CREATE TABLE ProgressEntity(
  id TEXT NOT NULL,
  libraryItemId TEXT NOT NULL DEFAULT '',
  episodeId TEXT,
  mediaItemType TEXT NOT NULL DEFAULT '',
  progress REAL NOT NULL,
  duration REAL NOT NULL,
  currentTime REAL NOT NULL,
  isFinished INTEGER NOT NULL DEFAULT 0,
  PRIMARY KEY (libraryItemId, episodeId)
);

insert:
INSERT OR REPLACE INTO ProgressEntity(id, libraryItemId, episodeId, mediaItemType, progress, duration, currentTime, isFinished)
VALUES ?;

all:
SELECT * FROM ProgressEntity;

allIds:
SELECT id FROM ProgressEntity;

byLibraryItemId:
SELECT *
FROM ProgressEntity
WHERE libraryItemId = :id;

byLibraryItemIdAndFinished:
SELECT *
FROM ProgressEntity
WHERE libraryItemId = :id AND isFinished = 1;

bookById:
SELECT *
FROM ProgressEntity
WHERE libraryItemId = :libraryItemId;

episodeById:
SELECT *
FROM ProgressEntity
WHERE episodeId = :episodeId;

updateBookProgress:
UPDATE ProgressEntity
SET progress = :progress, currentTime = :currentTime
WHERE libraryItemId = :libraryItemId AND episodeId IS NULL;

updateBookCurrentTime:
UPDATE ProgressEntity
SET currentTime = :currentTime,
    progress = :currentTime/duration
WHERE libraryItemId = :libraryItemId AND episodeId IS NULL;

updatePodcastProgress:
UPDATE ProgressEntity
SET progress = :progress, currentTime = :currentTime
WHERE episodeId = :episodeId AND episodeId IS NOT NULL;

updatePodcastCurrentTime:
UPDATE ProgressEntity
SET currentTime = :currentTime,
    progress = :currentTime/duration
WHERE episodeId = :episodeId AND episodeId IS NOT NULL;

deleteBookById:
DELETE FROM ProgressEntity
WHERE libraryItemId = :libraryItemId;

deleteEpisodeById:
DELETE FROM ProgressEntity
WHERE episodeId = :episodeId AND episodeId IS NOT NULL;

deleteById:
DELETE FROM ProgressEntity WHERE id = ?;

deleteAll:
DELETE FROM ProgressEntity;

toggleIsFinishedByEpisodeId:
UPDATE ProgressEntity
SET
  isFinished = CASE WHEN isFinished = 1 THEN 0 ELSE 1 END,
  progress   = 0,
  currentTime = 0
WHERE episodeId = :episodeId AND episodeId IS NOT NULL;

markEpisodeFinished:
INSERT INTO ProgressEntity (
  id,
  libraryItemId,
  episodeId,
  mediaItemType,
  progress,
  duration,
  currentTime,
  isFinished
)
VALUES (
  hex(randomblob(16)),
  :libraryItemId,
  :episodeId,
  'podcastEpisode',
  1,
  0,
  0,
  1
);

finishedEpisodeIdsGroupedByLibraryItemId:
SELECT libraryItemId,
       GROUP_CONCAT(episodeId) AS finishedEpisodeIds
FROM ProgressEntity
WHERE isFinished = 1
  AND episodeId IS NOT NULL
GROUP BY libraryItemId;

finishedEpisodeIdsByLibraryItemId:
SELECT episodeId
FROM ProgressEntity
WHERE libraryItemId = :libraryItemId
  AND isFinished = 1
  AND episodeId IS NOT NULL;